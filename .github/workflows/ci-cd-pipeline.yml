name: CI/CD pipeline 

on:
    push:
        branches:
            - main

concurrency:
    group: ${{ github.ref }}  # Use branch name as the group identifier
    cancel-in-progress: true  # Cancel the previous run if a new one is triggered

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - 
                name: Checkout the code
                uses: actions/checkout@v4
            -
                name: Get docker buildx
                uses: docker/setup-buildx-action@v3
            - 
                name: Get docker layer caches 
                uses: actions/cache@v4
                with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ github.sha }}
                  restore-keys: |
                    ${{ runner.os }}-buildx-
            - 
                name: Build docker image and cache the layers
                run: |
                    docker buildx build \
                        -f Dockerfile.prod \
                        -t logistic-app:latest \
                        --cache-from=type=local,src=/tmp/.buildx-cache \
                        --cache-to=type=local,dest=/tmp/.buildx-cache-new \
                        --load \
                        .
            - 
                name: Save cached layers
                run: |
                    rm -rf /tmp/.buildx-cache
                    mv /tmp/.buildx-cache-new /tmp/.buildx-cache
            
            -
                name: Compress the docker image into file
                run: docker save logistic-app:latest -o logistic-app.tar
            -
                name: Upload Docker image as artifact
                uses: actions/upload-artifact@v4
                with:
                    name: app-image # Name of the artifact
                    path: logistic-app.tar             
    test:
        runs-on: ubuntu-latest
        needs: build

        steps:
            -
                name: Get Docker image artifact from the build stage
                uses: actions/download-artifact@v4
                with:
                    name: app-image
            -
                name: Load artifact into Docker engine
                run: docker load -i logistic-app.tar
            -
                name: Test the functionality
                run: docker run --rm logistic-app:latest bash -c "pytest /app/tests"